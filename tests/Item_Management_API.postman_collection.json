{
	"info": {
		"_postman_id": "a8b9c123-def4-5678-90ab-cdef12345678",
		"name": "Item Management API",
		"description": "Collection for testing the Item Management FastAPI endpoints",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "List All Items",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is an array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(Array.isArray(jsonData)).to.be.true;",
							"});",
							"",
							"pm.test(\"Items have correct schema\", function () {",
							"    var jsonData = pm.response.json();",
							"    if (jsonData.length > 0) {",
							"        pm.expect(jsonData[0]).to.have.property('name');",
							"        pm.expect(jsonData[0]).to.have.property('price');",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/items/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"items",
						""
					]
				},
				"description": "Get all items from the inventory"
			},
			"response": []
		},
		{
			"name": "Create Item",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Item created successfully\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.name).to.eql(pm.variables.get(\"itemName\"));",
							"    pm.expect(jsonData.price).to.eql(Number(pm.variables.get(\"itemPrice\")));",
							"});",
							"",
							"pm.test(\"Response has correct schema\", function () {",
							"    var schema = {",
							"        type: 'object',",
							"        required: ['name', 'price'],",
							"        properties: {",
							"            name: { type: 'string' },",
							"            price: { type: 'number' }",
							"        }",
							"    };",
							"    ",
							"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.variables.set(\"itemName\", \"test_item_\" + Date.now());",
							"pm.variables.set(\"itemPrice\", \"9.99\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"{{itemName}}\",\n    \"price\": {{itemPrice}}\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/items/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"items",
						""
					]
				},
				"description": "Create a new item in the inventory"
			},
			"response": []
		},
		{
			"name": "Get Item by Name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Item found with correct data\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.name).to.eql(pm.variables.get(\"itemName\"));",
							"});",
							"",
							"pm.test(\"Response has correct schema\", function () {",
							"    var schema = {",
							"        type: 'object',",
							"        required: ['name', 'price'],",
							"        properties: {",
							"            name: { type: 'string' },",
							"            price: { type: 'number' }",
							"        }",
							"    };",
							"    ",
							"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/items/{{itemName}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"items",
						"{{itemName}}"
					]
				},
				"description": "Get a specific item by its name"
			},
			"response": []
		},
		{
			"name": "Create Duplicate Item (Error Case)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code indicates error\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([400, 409, 422]);",
							"});",
							"",
							"pm.test(\"Error message mentions duplicate item\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.detail).to.include('already exists');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"{{itemName}}\",\n    \"price\": {{itemPrice}}\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/items/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"items",
						""
					]
				},
				"description": "Attempt to create an item with a name that already exists (should fail)"
			},
			"response": []
		},
		{
			"name": "Get Non-existent Item (Error Case)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code indicates error\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([404, 422]);",
							"});",
							"",
							"pm.test(\"Error message mentions item not found\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.detail).to.include('not found');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/items/non_existent_item_{{$timestamp}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"items",
						"non_existent_item_{{$timestamp}}"
					]
				},
				"description": "Attempt to get an item that doesn't exist (should fail)"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://127.0.0.1:8000",
			"type": "string"
		}
	]
}